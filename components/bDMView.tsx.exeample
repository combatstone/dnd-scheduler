// components/DMView.tsx

"use client";

import { useState, useEffect, useMemo } from "react";
import { doc, setDoc, addDoc, collection, DocumentData } from "firebase/firestore";
import { User } from "firebase/auth";
import { db } from "../lib/firebase";
import { format, startOfMonth, endOfMonth, eachDayOfInterval, startOfWeek, endOfWeek, isSameMonth, isToday, add, isSameDay, parseISO } from "date-fns";
import TimeSelectModal, { ProposalBlock } from "./TimeSelectModal";

// --- PROP NAME CORRECTED HERE ---
const DMView = ({ campaignId, user, allProposals }: { campaignId: string; user: User | null; allProposals: DocumentData[] }) => {
    const [selectedProposalId, setSelectedProposalId] = useState<string | null>(null);
    const [newProposalTitle, setNewProposalTitle] = useState("");
    
    const [proposalsByDay, setProposalsByDay] = useState<Record<string, ProposalBlock[]>>({});
    const [currentMonth, setCurrentMonth] = useState(new Date());
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [selectedDay, setSelectedDay] = useState<Date | null>(null);

    // This effect correctly loads the blocks for the selected proposal from the 'allProposals' list
    useEffect(() => {
        if (selectedProposalId) {
            const selected = allProposals.find(p => p.id === selectedProposalId);
            if (selected?.proposalBlocks) {
                const loadedBlocks: Record<string, ProposalBlock[]> = {};
                for (const dayKey in selected.proposalBlocks) {
                    loadedBlocks[dayKey] = selected.proposalBlocks[dayKey].map((block: any) => ({
                        ...block,
                        start: block.start.toDate(),
                        end: block.end.toDate(),
                    }));
                }
                setProposalsByDay(loadedBlocks);
            } else {
                setProposalsByDay({});
            }
        } else {
            setProposalsByDay({});
        }
    }, [selectedProposalId, allProposals]);

    const handleCreateProposal = async () => {
        if (!newProposalTitle.trim() || !user) return;
        const newProposalRef = await addDoc(collection(db, "campaigns", campaignId, "proposals"), {
            title: newProposalTitle,
            dmId: user.uid,
            createdAt: new Date(),
            proposalBlocks: {},
            responses: {}
        });
        setNewProposalTitle("");
        setSelectedProposalId(newProposalRef.id);
        alert(`Proposal "${newProposalTitle}" created! You can now add time blocks to it.`);
        window.location.reload();
    };

    const handleSaveProposals = async () => {
        if (!user || !selectedProposalId) {
            alert("Please select a proposal to save.");
            return;
        }
        const proposalRef = doc(db, "campaigns", campaignId, "proposals", selectedProposalId);
        await setDoc(proposalRef, { proposalBlocks: proposalsByDay }, { merge: true });
        alert("Proposal times saved!");
    };
    
    const daysInMonth = useMemo(() => eachDayOfInterval({ start: startOfWeek(startOfMonth(currentMonth)), end: endOfWeek(endOfMonth(currentMonth)) }), [currentMonth]);
    const handleDayClick = (day: Date) => { setSelectedDay(day); setIsModalOpen(true); };
    const handleSaveBlocksForDay = (newBlocks: ProposalBlock[]) => {
        if (!selectedDay) return;
        const dayKey = format(selectedDay, 'yyyy-MM-dd');
        setProposalsByDay(prev => ({ ...prev, [dayKey]: newBlocks }));
    };

    return (
        <div className="w-full max-w-4xl mt-8">
            <div className="bg-white text-black p-4 rounded-lg shadow-lg mb-8">
                <h2 className="text-xl font-bold mb-4">Manage Session Proposals</h2>
                <div className="grid md:grid-cols-2 gap-4">
                    <div>
                        <label htmlFor="proposal-select" className="block text-sm font-medium text-gray-700">Edit Existing Proposal</label>
                        <select
                            id="proposal-select"
                            value={selectedProposalId || ''}
                            onChange={e => setSelectedProposalId(e.target.value)}
                            className="mt-1 block w-full p-2 border border-gray-300 rounded-md"
                        >
                            <option value="" disabled>-- Select a proposal --</option>
                            {allProposals.map(p => <option key={p.id} value={p.id}>{p.title}</option>)}
                        </select>
                    </div>
                    <div className="flex items-end gap-2">
                        <div className="flex-grow">
                            <label htmlFor="new-proposal" className="block text-sm font-medium text-gray-700">Or Create a New One</label>
                            <input
                                id="new-proposal"
                                type="text"
                                value={newProposalTitle}
                                onChange={e => setNewProposalTitle(e.target.value)}
                                placeholder="e.g., Session 5: The Final Battle"
                                className="mt-1 block w-full p-2 border border-gray-300 rounded-md"
                            />
                        </div>
                        <button onClick={handleCreateProposal} className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded h-10">Create</button>
                    </div>
                </div>
            </div>

            {selectedProposalId ? (
                <div className="bg-white text-black p-4 rounded-lg shadow-lg">
                    <p className="text-sm text-gray-600 mb-4">Editing time blocks for: <span className="font-bold">{allProposals.find(p => p.id === selectedProposalId)?.title}</span></p>
                    <div className="flex justify-between items-center mb-4">
                        <button onClick={() => setCurrentMonth(add(currentMonth, { months: -1 }))} className="font-bold text-lg p-2">&lt;</button>
                        <h2 className="text-xl font-bold">{format(currentMonth, "MMMM yyyy")}</h2>
                        <button onClick={() => setCurrentMonth(add(currentMonth, { months: 1 }))} className="font-bold text-lg p-2">&gt;</button>
                    </div>
                    <div className="grid grid-cols-7 text-center font-bold text-sm">
                        {["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"].map(d => <div key={d} className="p-2">{d}</div>)}
                    </div>
                    <div className="grid grid-cols-7 gap-1">
                       {daysInMonth.map(day => {
                            const dayKey = format(day, 'yyyy-MM-dd');
                            const dayBlocks = proposalsByDay[dayKey] || [];
                            return (
                                <div key={day.toString()} onClick={() => handleDayClick(day)} className={`pt-1 h-28 border rounded cursor-pointer flex flex-col items-center justify-start relative text-sm ${!isSameMonth(day, currentMonth) ? "text-gray-400 bg-gray-50" : "bg-white"} ${isToday(day) ? "border-2 border-blue-500" : ""} hover:bg-blue-100`}>
                                    <span className={`font-medium ${isToday(day) ? 'text-blue-600' : ''}`}>{format(day, "d")}</span>
                                    {dayBlocks.length > 0 && (
                                        <div className="text-center text-green-800 text-[10px] font-semibold p-1 rounded-md w-full mt-1 overflow-y-auto">
                                            {dayBlocks.map(block => <div key={block.id}>{`${format(block.start, 'h:mma')}-${format(block.end, 'h:mma')}`.toLowerCase()}</div>)}
                                        </div>
                                    )}
                                </div>
                            );
                        })}
                    </div>
                    <div className="text-center mt-6"><button onClick={handleSaveProposals} className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded">Save Times for This Proposal</button></div>
                    {isModalOpen && selectedDay && <TimeSelectModal day={selectedDay} onClose={() => setIsModalOpen(false)} onSave={handleSaveBlocksForDay} existingBlocks={proposalsByDay[format(selectedDay, 'yyyy-MM-dd')] || []} />}
                </div>
            ) : (
                <div className="text-center text-white bg-gray-700 p-8 rounded-lg">Please select or create a proposal above to begin adding time slots.</div>
            )}
        </div>
    );
};

export default DMView;
